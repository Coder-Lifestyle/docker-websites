# Define the user that start the nginx processes, the group will be the same if it's not supplied
user nginx;

# One worker process per CPU core. Auto per nginx v1.9.10
worker_processes auto;
worker_cpu_affinity auto;

# Must be equal or higher as 'worker_processes' * 'worker_connections'
worker_rlimit_nofile 8192;

# Set the pid for nginx
pid /run/nginx.pid;

events {
    #
    # Determines how many clients will be served by each worker process.
    # (Max clients = worker_connections * worker_processes)
    # Should be equal to `ulimit -n / worker_processes`
    #
    worker_connections 1024;

    #
    # Let each process accept multiple connections.
    # Accept as many connections as possible, after nginx gets notification
    # about a new connection.
    # May flood worker_connections, if that option is set too low.
    #
    multi_accept on;

    #
    # Preferred connection method for newer linux versions.
    # Essential for linux, optmized to serve many clients with each thread.
    #
    use epoll;
}

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

http {
    #
    # Override some buffer limitations, will prevent DDOS too.
    #
    client_body_buffer_size 128k;
    client_max_body_size 30m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;

    #
    # Timeouts
    # The client_body_timeout and client_header_timeout directives are
    # responsible for the time a server will wait for a client body or
    # client header to be sent after request. If neither a body or header
    # is sent, the server will issue a 408 error or Request time out.
    #
    client_body_timeout   3s;
    client_header_timeout 3s;

    # The keepalive_timeout assigns the timeout for keep-alive connections
    # with the client. Simply put, Nginx will close connections with the
    # client after this period of time.
    keepalive_timeout 3s;

    # Finally, the send_timeout is a timeout for transmitting a response
    # to the client. If the client does not receive anything within this
    # time, then the connection will be closed.
    send_timeout 3s;

    #
    # Allow the server to close the connection after a client stops
    # responding.
    # Frees up socket-associated memory.
    #
    reset_timedout_connection on;

    #
    # Open file descriptors.
    # Caches information about open FDs, freqently accessed files.
    #
    open_file_cache_errors on;

    # Cache 200.000 files maximum, removed from cache after 2 mins of not being accessed.
    open_file_cache max=200000 inactive=2m;

    # Revalidate cache after 1 minute.
    open_file_cache_valid 1m;

    # Cache files after 2 uses
    open_file_cache_min_uses 2;

    #
    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write(), since the requires transferring
    # data to and from the user space.
    #
    sendfile on;

    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one
    # packet, instead of using partial frames. This is useful for prepending
    # headers before calling sendfile, or for throughput optimization.
    tcp_nopush on;

    #
    # Don't buffer data-sends (disable Nagle algorithm). Good for sending
    # frequent small bursts of data in real time.
    #
    tcp_nodelay on;

    # Get all the mime types and set the default type.
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ##
    # Gzip Settings
    ##
    gzip on;

    # Disable for certain IE versions
    gzip_disable “MSIE [1-6]\.(?!.*SV1)”;

    # Only allow proxy request with these headers to be gzipped.
    gzip_proxied any;

    # Default is 6 (1<n<9), but 2 -- even 1 -- is enough. The higher it is, the
    # more CPU cycles will be wasted.
    gzip_comp_level 5;

    # Content min lenght
    gzip_min_length 1000;

    gzip_vary on;
    gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    # 32 blocks of 4k
    gzip_buffers 32 4k;

    # Minimal http version
    gzip_http_version 1.1;

    # Set the index
    index index.php index.html;

    # Default log format
    log_format main '$remote_addr $upstream_cache_status $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent"';

    # Base cache path
    fastcgi_cache_path /etc/nginx/cache levels=1:2 keys_zone=default:100m max_size=10g inactive=60m use_temp_path=off;

    # Cache key
    fastcgi_cache_key "$scheme$request_method$host$request_uri";

    # Server stale cache when encountering 500 or 503 errors
    fastcgi_cache_use_stale error timeout invalid_header updating http_500 http_503;

    # Only let one request populate the cache at a time, let the timout for this request be 5 seconds.
    fastcgi_cache_lock on;
    fastcgi_cache_lock_timeout 5s;

    # Cache valid responses for 60 minutes and invalid responses for 1 minute.
    fastcgi_cache_valid 200 301 302 60m;
    fastcgi_cache_valid 400 404 503  1m;

    # Add the fastcgi cache header for debugging
    add_header X-FastCGI-Cache $upstream_cache_status;

    # Only cache GET and HEAD methods.
    fastcgi_cache_methods GET HEAD;

    # Cache after 2 uses of a file.
    fastcgi_cache_min_uses 2;
    fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

    # Mitigate https://httpoxy.org/ vulnerabilities
    fastcgi_param HTTP_PROXY "";

    fastcgi_connect_timeout 60;
    fastcgi_send_timeout 180;
    fastcgi_read_timeout 500;

    fastcgi_buffer_size 128k;
    fastcgi_buffers 4 256k;
    fastcgi_busy_buffers_size 256k;
    fastcgi_temp_file_write_size 256k;

    # Number of requests per connection, does not affect SPDY
    keepalive_requests 10;

    # Allow all browsers to use keepalive connections
    keepalive_disable none;

    # Adds the line "Content-Type" into response-header, same as "source_charset"
    charset utf-8;
    source_charset utf-8;

    # Throws away non-standard headers in the client request
    ignore_invalid_headers on;

    # Disabled to stop range header DoS attacks as resumed downloads are denied.
    max_ranges 0;

    # Enables or disables adding comments to responses for MSIE clients with status greater than 400 to increase the response size to 512 bytes.
    msie_padding off;

    # Postpone sends to match our machine's MSS
    postpone_output 1440;
    output_buffers 1 512k;
    read_ahead 512K;
    recursive_error_pages on;

    # If off, nginx will use the requested Host header
    server_name_in_redirect off;

    # Sets the bucket size for the server names hash tables. The default value depends on the size of the processor’s cache line.
    server_names_hash_bucket_size 2048;

    # Sets the maximum size of the variables hash table.
    variables_hash_max_size 2048;

    # Sets the bucket size for the variables hash table.
    variables_hash_bucket_size 512;

    # Sets the maximum size of the types hash tables.
    types_hash_max_size 2048;

    # Don't send the nginx version number in error pages and Server header
    server_tokens off;

    # When serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    add_header X-Content-Type-Options nosniff;

    # Only allow frame on sameorigin
    add_header X-Frame-Options "SAMEORIGIN" always;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block" always;

    ##
    # Virtual Host Configs
    ##
    include /etc/nginx/conf.d/*.conf;
}

